Expert Request Scope Improvement

This document outlines the Expert Request Scope Improvement feature for Retool-Access, which enables the Fulfillment Team (FT) to automatically enhance the scope of Expert Requests using an AI-based suggestion system. This feature leverages an API call to ChatGPT to analyze and suggest improvements for various fields within each Expert Request. FT Admins can review these suggestions and apply approved improvements.

Diagram: Expert Request Scope Improvement Flow

Below is the process flow for the feature:

              +-------------------------+
              |     Access API          |
              |   (Incoming Requests)   |
              +-----------+-------------+
                          |
                          |
             +------------v-------------+
             |     Retool Database      |
             |  (New Expert Request     |
             |    Record Created)       |
             +------------+-------------+
                          |
                          |
             +------------v-------------+
             |    Retool Application    |
             |    (Triggers API Call    |
             |     to ChatGPT)          |
             +------------+-------------+
                          |
                          |
             +------------v-------------+
             |     ChatGPT API          |
             | (Reviews Scope Fields,   |
             |  Generates Suggestions)  |
             +------------+-------------+
                          |
                          |
             +------------v-------------+
             |    Retool Database       |
             |  (Stores Suggestions in  |
             |  Mirror Properties)      |
             +------------+-------------+
                          |
                          |
             +------------v-------------+
             |      Retool App          |
             |   (FT Admin Reviews,     |
             |  Approves Suggestions)   |
             +------------+-------------+
                          |
                          |
             +------------v-------------+
             |    Retool Database       |
             | (Merges Approved Fields  |
             |  to Main Properties)     |
             +--------------------------+

Feature Scope

The Expert Request Scope Improvement feature allows the Fulfillment Team to:

	1.	Automatically analyze and enhance the scope of new Expert Requests through ChatGPT, which provides field-by-field improvement suggestions.
	2.	Store these suggestions in mirror properties within Retool, maintaining the original fields until admin approval.
	3.	Enable FT Admins to review and approve suggestions directly in Retool, merging them into the main properties if approved.
	4.	Keep the updates within Retool, allowing FT Admins to manually transfer final updates to the OnFrontiers product.

Step-by-Step Flow

	1.	Access API:
	•	A new Expert Request arrives via the Access API, creating a corresponding record in the Retool Database.
	2.	Trigger ChatGPT API Call:
	•	Upon receiving the new record, Retool sends an API call to ChatGPT with the 20+ fields in the Expert Request.
	•	ChatGPT generates suggested improvements for each field based on the input scope.
	3.	Store Suggestions in Retool Database:
	•	ChatGPT’s suggestions are stored as mirror properties in the Retool Database. The original request properties remain unchanged until approved by an FT Admin.
	4.	FT Admin Review:
	•	The Retool app displays the suggestions to the FT Admin with the prompt: “Is this ok?” for each suggested field.
	•	If approved, the suggestion merges into the main properties in Retool.
	5.	Manual Update to OnFrontiers Product:
	•	Retool does not push updates directly to the Access API. Instead, FT Admins copy approved changes into the OnFrontiers product as needed.

Implementation Phases

For an iterative setup, the feature will be implemented in the following phases:

	1.	Phase 1: Initial Data Flow:
	•	Set up the Retool Database to automatically create a new Expert Request record for each incoming request via the Access API.
	2.	Phase 2: ChatGPT API Integration:
	•	Configure the Retool app to trigger an API call to ChatGPT with request fields and receive improvement suggestions.
	3.	Phase 3: Suggestions Mirroring:
	•	Store ChatGPT’s suggestions in mirror properties, enabling FT Admins to review and approve the suggestions.
	4.	Phase 4: Admin Review Workflow:
	•	Build the FT Admin interface in Retool to allow easy review and merging of approved suggestions into the main properties.

Detailed Implementation of the Expert Request Insertion Workflow

Components

	•	Retool UI Components:
	•	listExpertRequestsAll: Table holding the list of records fetched from an external API.
	•	ExpertRequestDemo (JavaScript query): Main logic to parse and send data for insertion.
	•	insertRecord (SQL query): Inserts new records into the rt_expert_requests table with conflict handling.
	•	Database Table:
	•	rt_expert_requests with fields:
	•	id (Primary Key, Integer)
	•	name (String)
	•	description (String)
	•	billing_account_id (Integer)

Insertion Logic and Conflict Handling

Step 1: Data Parsing and Preparation

In the ExpertRequestDemo JavaScript query:

const data = listExpertRequestsAll.data;

for (const record of data) {
  try {
    console.log(`Processing record with id: ${record.id}`);
    
    // Parse each property
    const parsedId = Number(record.id) || null;
    const parsedName = record.name || '';
    const parsedDescription = record.description || '';
    const parsedBillingAccountId = record.billing_account_id || null;

    // Log parsed values for debugging
    console.log(`Parsed ID: ${parsedId}`);
    console.log(`Parsed Name: ${parsedName}`);
    console.log(`Parsed Description: ${parsedDescription}`);
    console.log(`Parsed Billing Account ID: ${parsedBillingAccountId}`);
    
    // Trigger the SQL insert query
    await insertRecord.trigger({
      additionalScope: {
        id: parsedId,
        name: parsedName,
        description: parsedDescription,
        billing_account_id: parsedBillingAccountId
      }
    });
  } catch (error) {
    console.error(`Error processing record with id: ${record.id}`, error);
  }
}

Step 2: SQL Insert Query with Conflict Handling

In the insertRecord SQL query:

INSERT INTO rt_expert_requests (id, name, description, billing_account_id)
VALUES (
  {{ additionalScope.id }},
  {{ additionalScope.name }},
  {{ additionalScope.description }},
  {{ additionalScope.billing_account_id }}
)
ON CONFLICT (id) DO NOTHING;

This query:

	•	Attempts to insert each parsed record.
	•	Uses ON CONFLICT (id) DO NOTHING to skip records with duplicate IDs, avoiding error messages on duplicate entries.

Troubleshooting & Key Learnings

	1.	Data Parsing for SQL: Each value is parsed within ExpertRequestDemo to avoid null or invalid values.
	2.	Elimination of Check Query: We initially used checkRecordExists to preemptively check for duplicates, but it was removed after adding ON CONFLICT (id) DO NOTHING.
	3.	Error Logging: Logs and the SQL Prepared Statement preview in Retool provided insights into any issues with additionalScope values.

This documentation should be added to GitHub to provide context, implementation details, and troubleshooting information for future developers or collaborators. Let me know if you’d like any further adjustments or additions!
